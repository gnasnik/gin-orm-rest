// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gnasnik/gin-orm-rest/generated/model"
)

func newScheduler(db *gorm.DB, opts ...gen.DOOption) scheduler {
	_scheduler := scheduler{}

	_scheduler.schedulerDo.UseDB(db, opts...)
	_scheduler.schedulerDo.UseModel(&model.Scheduler{})

	tableName := _scheduler.schedulerDo.TableName()
	_scheduler.ALL = field.NewAsterisk(tableName)
	_scheduler.ID = field.NewInt64(tableName, "id")
	_scheduler.Name = field.NewString(tableName, "name")
	_scheduler.Group_ = field.NewString(tableName, "group")
	_scheduler.Address = field.NewString(tableName, "address")
	_scheduler.Status = field.NewInt32(tableName, "status")
	_scheduler.CreatedAt = field.NewTime(tableName, "created_at")
	_scheduler.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scheduler.DeletedAt = field.NewField(tableName, "deleted_at")

	_scheduler.fillFieldMap()

	return _scheduler
}

type scheduler struct {
	schedulerDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	Group_    field.String
	Address   field.String
	Status    field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (s scheduler) Table(newTableName string) *scheduler {
	s.schedulerDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scheduler) As(alias string) *scheduler {
	s.schedulerDo.DO = *(s.schedulerDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scheduler) updateTableName(table string) *scheduler {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Group_ = field.NewString(table, "group")
	s.Address = field.NewString(table, "address")
	s.Status = field.NewInt32(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scheduler) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scheduler) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["group"] = s.Group_
	s.fieldMap["address"] = s.Address
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scheduler) clone(db *gorm.DB) scheduler {
	s.schedulerDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scheduler) replaceDB(db *gorm.DB) scheduler {
	s.schedulerDo.ReplaceDB(db)
	return s
}

type schedulerDo struct{ gen.DO }

type ISchedulerDo interface {
	gen.SubQuery
	Debug() ISchedulerDo
	WithContext(ctx context.Context) ISchedulerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISchedulerDo
	WriteDB() ISchedulerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISchedulerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISchedulerDo
	Not(conds ...gen.Condition) ISchedulerDo
	Or(conds ...gen.Condition) ISchedulerDo
	Select(conds ...field.Expr) ISchedulerDo
	Where(conds ...gen.Condition) ISchedulerDo
	Order(conds ...field.Expr) ISchedulerDo
	Distinct(cols ...field.Expr) ISchedulerDo
	Omit(cols ...field.Expr) ISchedulerDo
	Join(table schema.Tabler, on ...field.Expr) ISchedulerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerDo
	Group(cols ...field.Expr) ISchedulerDo
	Having(conds ...gen.Condition) ISchedulerDo
	Limit(limit int) ISchedulerDo
	Offset(offset int) ISchedulerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerDo
	Unscoped() ISchedulerDo
	Create(values ...*model.Scheduler) error
	CreateInBatches(values []*model.Scheduler, batchSize int) error
	Save(values ...*model.Scheduler) error
	First() (*model.Scheduler, error)
	Take() (*model.Scheduler, error)
	Last() (*model.Scheduler, error)
	Find() ([]*model.Scheduler, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Scheduler, err error)
	FindInBatches(result *[]*model.Scheduler, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Scheduler) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISchedulerDo
	Assign(attrs ...field.AssignExpr) ISchedulerDo
	Joins(fields ...field.RelationField) ISchedulerDo
	Preload(fields ...field.RelationField) ISchedulerDo
	FirstOrInit() (*model.Scheduler, error)
	FirstOrCreate() (*model.Scheduler, error)
	FindByPage(offset int, limit int) (result []*model.Scheduler, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISchedulerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s schedulerDo) Debug() ISchedulerDo {
	return s.withDO(s.DO.Debug())
}

func (s schedulerDo) WithContext(ctx context.Context) ISchedulerDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s schedulerDo) ReadDB() ISchedulerDo {
	return s.Clauses(dbresolver.Read)
}

func (s schedulerDo) WriteDB() ISchedulerDo {
	return s.Clauses(dbresolver.Write)
}

func (s schedulerDo) Session(config *gorm.Session) ISchedulerDo {
	return s.withDO(s.DO.Session(config))
}

func (s schedulerDo) Clauses(conds ...clause.Expression) ISchedulerDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s schedulerDo) Returning(value interface{}, columns ...string) ISchedulerDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s schedulerDo) Not(conds ...gen.Condition) ISchedulerDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s schedulerDo) Or(conds ...gen.Condition) ISchedulerDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s schedulerDo) Select(conds ...field.Expr) ISchedulerDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s schedulerDo) Where(conds ...gen.Condition) ISchedulerDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s schedulerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISchedulerDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s schedulerDo) Order(conds ...field.Expr) ISchedulerDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s schedulerDo) Distinct(cols ...field.Expr) ISchedulerDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s schedulerDo) Omit(cols ...field.Expr) ISchedulerDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s schedulerDo) Join(table schema.Tabler, on ...field.Expr) ISchedulerDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s schedulerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s schedulerDo) RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s schedulerDo) Group(cols ...field.Expr) ISchedulerDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s schedulerDo) Having(conds ...gen.Condition) ISchedulerDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s schedulerDo) Limit(limit int) ISchedulerDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s schedulerDo) Offset(offset int) ISchedulerDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s schedulerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s schedulerDo) Unscoped() ISchedulerDo {
	return s.withDO(s.DO.Unscoped())
}

func (s schedulerDo) Create(values ...*model.Scheduler) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s schedulerDo) CreateInBatches(values []*model.Scheduler, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s schedulerDo) Save(values ...*model.Scheduler) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s schedulerDo) First() (*model.Scheduler, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scheduler), nil
	}
}

func (s schedulerDo) Take() (*model.Scheduler, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scheduler), nil
	}
}

func (s schedulerDo) Last() (*model.Scheduler, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scheduler), nil
	}
}

func (s schedulerDo) Find() ([]*model.Scheduler, error) {
	result, err := s.DO.Find()
	return result.([]*model.Scheduler), err
}

func (s schedulerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Scheduler, err error) {
	buf := make([]*model.Scheduler, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s schedulerDo) FindInBatches(result *[]*model.Scheduler, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s schedulerDo) Attrs(attrs ...field.AssignExpr) ISchedulerDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s schedulerDo) Assign(attrs ...field.AssignExpr) ISchedulerDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s schedulerDo) Joins(fields ...field.RelationField) ISchedulerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s schedulerDo) Preload(fields ...field.RelationField) ISchedulerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s schedulerDo) FirstOrInit() (*model.Scheduler, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scheduler), nil
	}
}

func (s schedulerDo) FirstOrCreate() (*model.Scheduler, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scheduler), nil
	}
}

func (s schedulerDo) FindByPage(offset int, limit int) (result []*model.Scheduler, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s schedulerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s schedulerDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s schedulerDo) Delete(models ...*model.Scheduler) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *schedulerDo) withDO(do gen.Dao) *schedulerDo {
	s.DO = *do.(*gen.DO)
	return s
}
